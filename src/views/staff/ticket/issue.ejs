<%- include('../../layouts/staff-header.ejs') %>
<div class="content-page">
                <div class="content">

                    <div class="container-fluid">

                        <div class="row">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h4 class="header-title">Issue Ticket</h4>

                                        <div>
                                            <h6>Scan or Upload QR Code</h6>

                                            <div id="qr-reader" style="width: 300px;"></div>

                                            <div style="margin-top: 20px;">
                                                <input type="file" id="qr-file-input" accept="image/*" />
                                            </div>

                                            <div id="qr-result" style="margin-top: 20px;">
                                                <h4>Scanned QR Code Data:</h4>
                                                <pre id="decoded-data">Waiting for scan...</pre>
                                            </div>
                                        </div>

                                        <hr>
                                        <h4 class="header-title">QR Details</h4>
                                        <div id="ticket-details" style="margin-top: 20px;">

                                        </div>


                                    </div> </div> </div>
                        </div>
                        </div> </div>

            </div>
            <%- include('../../layouts/staff-footer.ejs') %>

 <script src="https://unpkg.com/html5-qrcode"></script>
<script>
  const qrResult = document.getElementById('decoded-data');
  const ticketDetails = document.getElementById("ticket-details");

  const html5QrCode = new Html5Qrcode("qr-reader");
  const config = { fps: 10, qrbox: 250 };

  async function handleDecodedData(decodedText) {
    let scannedData;
    try {
      scannedData = JSON.parse(decodedText);
      qrResult.textContent = JSON.stringify(scannedData, null, 2);
    } catch (err) {
      qrResult.textContent = "Invalid QR data.";
      console.error("Invalid JSON in QR code:", err);
      return;
    }

    // Ensure scannedData has the expected properties
    const { orderId, ticketTypeId, seatIdsForType } = scannedData;
    if (!orderId || !ticketTypeId || !seatIdsForType) {
        qrResult.textContent = "Invalid QR data: Missing orderId, ticketTypeId, or seatIdsForType.";
        return;
    }


    try {
      // Send orderId, ticketTypeId, and specific seatIds to backend for verification
      const res = await fetch("/staff/ticket-verify", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ orderId, ticketTypeId, seatIdsForType })
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Verification failed");
      }

      // Destructure eventName, ticketTypeName, and seats from the backend response
      const { eventName, ticketTypeName, seats } = await res.json(); 

      renderTicketDetails(orderId, eventName, ticketTypeName, seats);
    } catch (err) {
      ticketDetails.innerHTML = `<p style="color: red;">❌ Error: ${err.message}</p>`;
      console.error("Error verifying ticket:", err);
    }
  }

  function renderTicketDetails(orderId, eventName, ticketTypeName, seats) {
    ticketDetails.innerHTML = `
      <h4>Event Name: ${eventName}</h4>
      <h5>Ticket Type: ${ticketTypeName}</h5>
      <ul class="list-group mb-0 user-list">
        ${seats.map(seat => `
          <li id="seat-${seat.seatId}" class="list-group-item">
            Seat: <strong>${seat.seatId}</strong>
            ${
              seat.status === "issued"
                ? '<span style="color: green;">✅ Already Issued</span>'
                : `<button onclick="issueTicket('${orderId}', '${seat.seatId}')" class="btn btn-warning btn-xs waves-effect waves-light">Issue Ticket</button>`
            }
            <span id="status-${seat.seatId}" style="margin-left: 10px;"></span>
          </li>
        `).join("")}
      </ul>
    `;
  }

  async function issueTicket(orderId, seatId) {
    try {
      const res = await fetch("/api/ticket/issue", { // This endpoint needs to be handled by your backend
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ orderId, seatId }) // Send orderId and specific seatId
      });

      const result = await res.json();
      const statusEl = document.getElementById(`status-${seatId}`);
      const seatListItem = document.getElementById(`seat-${seatId}`); // Get the whole list item

      if (res.ok) {
        if (seatListItem) {
          // Remove the button and update the text
          const button = seatListItem.querySelector('button');
          if (button) {
            button.remove();
          }
          if (statusEl) {
            statusEl.innerHTML = '<span style="color: green;">✅ Issued</span>'; // Update the status span
          }
        }
      } else {
        if (statusEl) {
          statusEl.innerText = `❌ ${result.message || 'Error issuing'}`;
        }
      }
    } catch (err) {
      document.getElementById(`status-${seatId}`).innerText = "❌ Network error or server issue.";
      console.error("Error issuing ticket:", err);
    }
  }

  // === LIVE SCAN ===
  Html5Qrcode.getCameras().then(cameras => {
    if (cameras && cameras.length) {
      html5QrCode.start(
        { facingMode: "environment" },
        config,
        (decodedText) => {
          html5QrCode.stop(); // Optional: stop scanning after 1 scan
          handleDecodedData(decodedText);
        },
        (errorMessage) => {
          // console.warn("QR code scan error:", errorMessage); // Log errors silently
        }
      ).catch(err => {
        console.error("Failed to start QR code scanner:", err);
        alert("Failed to start camera. Please ensure camera access is granted.");
      });
    } else {
      alert("No cameras found or camera access denied. Please try scanning from a file.");
    }
  }).catch(err => {
    console.error("Error getting cameras:", err);
    alert("Error accessing camera information.");
  });

  // === FILE SCAN ===
  const fileInput = document.getElementById('qr-file-input');
  fileInput.addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    try {
      const decodedText = await html5QrCode.scanFile(file, true);
      handleDecodedData(decodedText);
    } catch (err) {
      qrResult.textContent = "❌ Failed to scan QR code from image.";
      console.error("QR scan file error: ", err);
    }
  });
</script>