<%- include('../layouts/header.ejs') %>
<style>
svg{
width: 100%;
height: auto; 
}
</style>
<div class="content-page">
    <div class="content">

        <div class="container-fluid">

            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="header-title">Edit Event</h4>
                            <ul class="nav nav-pills navtab-bg">
                            <li class="nav-item">
                                <a href="#home1" data-bs-toggle="tab" aria-expanded="false" class="nav-link active">
                                   Basic Details
                                </a>
                            </li>
                            <li class="nav-item">
                                <a href="#profile1" data-bs-toggle="tab" aria-expanded="true" class="nav-link ">
                                   Seat Configuration
                                </a>
                            </li>
                            
                        </ul>

                        <div class="tab-content">
                            <div class="tab-pane show active" id="home1">
                                <form class="mt-4" method="POST" action="/event/edit/<%= enrichedEvent.id %>" enctype="multipart/form-data">
                                    <% if (success) { %>
                                        <div class="alert alert-success"><%= success %></div>
                                    <% } %>
                                    <% if (error) { %>
                                        <div class="alert alert-danger"><%= error %></div>
                                    <% } %>

                                    <div class="row">
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Name</label>
                                            <input type="text" class="form-control" name="name" value="<%= formData?.name || enrichedEvent.name || '' %>">
                                            <% if (validationErrors?.name) { %>
                                                <small class="text-danger"><%= validationErrors.name[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Start Date Time</label>
                                            <input type="text" name="start_date_time" class="form-control datetime-datepicker" placeholder="Start Date and Time" value="<%= formData?.start_date_time || new Date(enrichedEvent.start_date_time).toISOString().slice(0, 16).replace('T', ' ') || '' %>">
                                            <% if (validationErrors?.start_date_time) { %>
                                                <small class="text-danger"><%= validationErrors.start_date_time[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">End Date Time</label>
                                            <input type="text" name="end_date_time" class="form-control datetime-datepicker" placeholder="End Date and Time" value="<%= formData?.end_date_time || new Date(enrichedEvent.end_date_time).toISOString().slice(0, 16).replace('T', ' ') || '' %>">
                                            <% if (validationErrors?.end_date_time) { %>
                                                <small class="text-danger"><%= validationErrors.end_date_time[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Description</label>
                                            <textarea class="form-control" id="example-textarea" name="discription" rows="5"><%= formData?.discription || enrichedEvent.description || '' %></textarea>
                                            <% if (validationErrors?.discription) { %>
                                                <small class="text-danger"><%= validationErrors.discription[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Ticket Policy</label>
                                            <textarea class="form-control" id="example-textarea" name="policy" rows="5"><%= formData?.policy || enrichedEvent.policy || '' %></textarea>
                                            <% if (validationErrors?.policy) { %>
                                                <small class="text-danger"><%= validationErrors.policy[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Organized By</label>
                                            <input type="text" class="form-control" name="organized_by" value="<%= formData?.organized_by || enrichedEvent.organized_by || '' %>">
                                            <% if (validationErrors?.organized_by) { %>
                                                <small class="text-danger"><%= validationErrors.organized_by[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Location</label>
                                            <select class="form-control" data-toggle="select2" name="location" data-width="100%">
                                                <option value="BMICH" <%= (formData?.location || enrichedEvent.location) === 'BMICH' ? 'selected' : '' %>>BMICH</option>
                                                <option value="Nelum Pokuna" <%= (formData?.location || enrichedEvent.location) === 'Nelum Pokuna' ? 'selected' : '' %>>Nelum Pokuna</option>
                                                <option value="Musaeus College" <%= (formData?.location || enrichedEvent.location) === 'Musaeus College' ? 'selected' : '' %>>Musaeus College</option>
                                            </select>
                                            <% if (validationErrors?.location) { %>
                                                <small class="text-danger"><%= validationErrors.location[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Artists</label>
                                            <select class="form-control select2-multiple" name="artists[]" data-toggle="select2" data-width="100%" multiple="multiple" data-placeholder="Choose ...">
                                                <% allArtists.forEach(artist => { %>
                                                    <option value="<%= artist.id %>"
                                                        <%
                                                            // Check if the artist ID is in formData (after validation error)
                                                            const isSelectedInFormData = formData?.artists && Array.isArray(formData.artists) && formData.artists.includes(artist.id.toString());
                                                            // Check if the artist ID is in enrichedEvent.artist_details (from database)
                                                            const isSelectedInEvent = enrichedEvent.artist_details && Array.isArray(enrichedEvent.artist_details) && enrichedEvent.artist_details.includes(artist.id);
                                                            if (isSelectedInFormData || isSelectedInEvent) {
                                                                %> selected <%
                                                            }
                                                        %>
                                                    >
                                                        <%= artist.name %>
                                                    </option>
                                                <% }); %>
                                            </select>
                                            <% if (validationErrors?.artists) { %>
                                                <small class="text-danger"><%= validationErrors.artists[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Banner Image</label>
                                            <input type="file" class="form-control" name="banner_image" accept="image/*">
                                            <% if (enrichedEvent.banner_image) { %>
                                                <div class="mt-2">
                                                    <img src="<%= enrichedEvent.banner_image %>" alt="Banner Image" style="max-width: 150px; height: auto;">
                                                </div>
                                            <% } %>
                                            <% if (validationErrors?.banner_image) { %>
                                                <small class="text-danger"><%= validationErrors.banner_image[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Featured Image</label>
                                            <input type="file" class="form-control" name="featured_image" accept="image/*">
                                            <% if (enrichedEvent.featured_image) { %>
                                                <div class="mt-2">
                                                    <img src="<%= enrichedEvent.featured_image %>" alt="Featured Image" style="max-width: 150px; height: auto;">
                                                </div>
                                            <% } %>
                                            <% if (validationErrors?.featured_image) { %>
                                                <small class="text-danger"><%= validationErrors.featured_image[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-12 mb-3">
                                            <h4 class="header-title">Set Ticket Prices</h4>
                                            <div id="ticket-container">
                                                <%
                                                // Prioritize formData tickets if present (after validation error)
                                                const ticketsToRender = formData?.tickets?.length > 0 ? formData.tickets : enrichedEvent.ticket_details;
                                                %>

                                                <% if (ticketsToRender && ticketsToRender.length > 0) { %>
                                                    <% ticketsToRender.forEach((ticket, index) => { %>
                                                        <%
                                                            // Determine if 'ticket' has 'type_id' (from formData) or 'ticketTypeId' (from enrichedEvent)
                                                            const currentTicketTypeId = ticket.type_id || ticket.ticketTypeId;
                                                            const currentTicketPrice = ticket.price;
                                                            const currentTicketCount = ticket.count || ticket.ticketCount;
                                                            const currentTicketType = ticket_types.find(tt => tt.id === currentTicketTypeId);
                                                            const currentHasCount = currentTicketType?.has_ticket_count;
                                                        %>
                                                        <div class="row ticket-row align-items-end mb-2" data-index="<%= index %>">
                                                            <div class="col-md-4">
                                                                <label class="form-label">Ticket Type</label>
                                                                <select name="tickets[<%= index %>][type_id]" class="form-control ticket-type-select" required>
                                                                    <option value="">Select a type</option>
                                                                    <% ticket_types.forEach(tt => { %>
                                                                        <option value="<%= tt.id %>" data-has-count="<%= tt.has_ticket_count %>" <%= currentTicketTypeId == tt.id ? 'selected' : '' %>>
                                                                            <%= tt.name %>
                                                                        </option>
                                                                    <% }); %>
                                                                </select>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <label class="form-label">Price</label>
                                                                <input type="number" name="tickets[<%= index %>][price]" class="form-control" placeholder="Enter price" value="<%= currentTicketPrice %>" required>
                                                            </div>
                                                            <div class="col-md-3 ticket-count-wrapper" style="<%= currentHasCount ? 'display: block;' : 'display: none;' %>">
                                                                <label class="form-label">Ticket Count</label>
                                                                <input type="number" name="tickets[<%= index %>][count]" class="form-control" placeholder="Enter count" value="<%= currentTicketCount || '' %>" <%= currentHasCount ? 'required' : '' %>>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <button type="button" class="btn btn-danger remove-ticket-btn">Remove</button>
                                                            </div>
                                                        </div>
                                                    <% }); %>
                                                <% } %>
                                            </div>
                                            <button type="button" class="btn btn-success" id="add-ticket-btn">+ Add</button>
                                        </div>
                                    </div>

                                    <button type="submit" class="btn btn-primary">Update</button>
                                </form>
                            </div>
                            <div class="tab-pane " id="profile1">
    <form class="mt-4" method="POST" action="/event/update-event-seats/<%= enrichedEvent.id %>">
        <div class="row align-items-end"> <%- /* Added a row for better alignment */ %>
            <div class="col-md-4 mb-3 mt-3">
                <label class="form-label">Assign Ticket Type</label>
                <select class="form-control" id="ticket-type-select" data-width="100%">
                    <option value="">Select Ticket Type</option>
                </select>
            </div>
            <div class="col-md-4 mb-3 mt-3"> <%- /* Added column for the new button */ %>
                <button type="button" id="assign-to-selected-btn" class="btn btn-info">Assign to Selected</button>
            </div>
        </div>

        <% if (enrichedEvent.location == "BMICH") { %>
            <%- include('../seat-maps/bmich.ejs') %>
        <% } %>
        <% if (enrichedEvent.location == "Nelum Pokuna") { %>
            <%- include('../seat-maps/nelum.ejs') %>
        <% } %>
        <% if (enrichedEvent.location == "Musaeus College") { %>
            <%- include('../seat-maps/musaeus.ejs') %>
        <% } %>
        
        <input type="hidden" name="seat_configuration" id="seat_configuration" >    
        <button type="submit" class="btn btn-primary mt-4">Save Seat Configuration</button>
    </form>
</div>
                           
                        </div>

                            

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<%- include('../layouts/footer.ejs') %>

<script>
 
    const ticketTypes = <%- JSON.stringify(ticket_types) %>;
    let ticketIndex = 0; 

    const existingTicketRows = document.querySelectorAll('.ticket-row');
    if (existingTicketRows.length > 0) {
        ticketIndex = existingTicketRows.length;
    }

    function createTicketRow(index, ticketData = {}) {
        let options = '';
        ticketTypes.forEach(tt => {

            const isSelected = ticketData.type_id == tt.id || ticketData.ticketTypeId == tt.id;
            options += `<option value="${tt.id}" data-has-count="${tt.has_ticket_count}" ${isSelected ? 'selected' : ''}>${tt.name}</option>`;
        });

        const initialHasCount = ticketTypes.find(tt => tt.id == (ticketData.type_id || ticketData.ticketTypeId))?.has_ticket_count || false;

        return `
            <div class="row ticket-row align-items-end mb-2" data-index="${index}">
                <div class="col-md-4">
                    <label class="form-label">Ticket Type</label>
                    <select name="tickets[${index}][type_id]" class="form-control ticket-type-select" required>
                        <option value="">Select a type</option>
                        ${options}
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Price</label>
                    <input type="number" name="tickets[${index}][price]" class="form-control" placeholder="Enter price" value="${ticketData.price || ''}" required>
                </div>
                <div class="col-md-3 ticket-count-wrapper" style="${initialHasCount ? 'display: block;' : 'display: none;'}">
                    <label class="form-label">Ticket Count</label>
                    <input type="number" name="tickets[${index}][count]" class="form-control" placeholder="Enter count" value="${ticketData.count || ticketData.ticketCount || ''}" ${initialHasCount ? 'required' : ''}>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger remove-ticket-btn">Remove</button>
                </div>
            </div>
        `;
    }

    document.getElementById('add-ticket-btn').addEventListener('click', () => {
        const rowHtml = createTicketRow(ticketIndex++);
        document.getElementById('ticket-container').insertAdjacentHTML('beforeend', rowHtml);
    });

    document.getElementById('ticket-container').addEventListener('change', function(e) {
        if (e.target.classList.contains('ticket-type-select')) {
            const row = e.target.closest('.ticket-row');
            const selectedOption = e.target.selectedOptions[0];

            const hasCount = selectedOption.dataset.hasCount === '1';
            const countWrapper = row.querySelector('.ticket-count-wrapper');
            const countInput = countWrapper.querySelector('input');

            if (hasCount) {
                countWrapper.style.display = 'block';
                countInput.required = true;
            } else {
                countWrapper.style.display = 'none';
                countInput.required = false;
                countInput.value = ''; 
            }
        }
    });

    document.getElementById('ticket-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-ticket-btn')) {
            e.target.closest('.ticket-row').remove();

        }
    });



</script>
<script>
const mapedSeats = JSON.parse(<%- JSON.stringify(enrichedEvent.seats || "[]") %>);
const seatTicketTypes = <%- JSON.stringify(enrichedEvent.ticket_details || []) %>;

document.addEventListener('DOMContentLoaded', () => {
    const definedTicketTypes = [
        { price: 0, type_id: 0, count: null, has_ticket_count: false, isUnavailable: true, ticketTypeName: 'Unavailable', color: '#000000' },
        ...seatTicketTypes.map(tt => ({...tt, type_id: tt.type_id || tt.ticketTypeId}))
    ];

    let seatConfiguration = mapedSeats.map(seat => { // Made it 'let' to allow reassignment if needed, though direct modification is current practice
        const ticketType = definedTicketTypes.find(type => type.type_id === seat.type_id);
        const color = ticketType ? ticketType.color : '#C4C4C4';
        const status = seat.status || (ticketType && ticketType.isUnavailable ? 'unavailable' : 'available');
        return { ...seat, color: color, status: status };
    });

    let selectedTicketType = null;
    let selectedSeatsGroup = new Set();

    const ticketTypeSelect = document.getElementById('ticket-type-select');
    const seatConfigurationInput = document.getElementById('seat_configuration');
    const allSeatGroupsOnPage = document.querySelectorAll('.seat-group'); // All potential seat groups
    const assignToSelectedBtn = document.getElementById('assign-to-selected-btn');

    // --- Marquee Selection Variables ---
    let isDragging = false;
    let marqueeRectDiv = null;
    let dragStartX, dragStartY;
    let svgSeatMapContainer = null; // This will be the SVG element
    let wasDragOperation = false; // Flag to distinguish click from drag

    // Function to initialize marquee selection elements and listeners
    function initializeMarqueeSelection() {
        svgSeatMapContainer = document.querySelector('#profile1 svg'); // Find the main SVG for the seat map

        if (!svgSeatMapContainer) {
            console.warn('Seat map SVG container not found. Marquee selection will be disabled.');
            return;
        }

        // Ensure the parent of the SVG can act as a positioning context for the marquee div
        if (svgSeatMapContainer.parentElement) {
            svgSeatMapContainer.parentElement.style.position = 'relative';
        }

        marqueeRectDiv = document.createElement('div');
        marqueeRectDiv.className = 'marquee-selection-visual'; // Apply CSS class
        marqueeRectDiv.style.display = 'none'; // Initially hidden
        (svgSeatMapContainer.parentElement || document.body).appendChild(marqueeRectDiv);

        svgSeatMapContainer.addEventListener('mousedown', handleSvgMouseDown);
    }

    // Populate the ticket type dropdown
    const clearOption = document.createElement('option');
    clearOption.value = "";
    clearOption.textContent = "Clear Assignment / Set to Default";
    ticketTypeSelect.appendChild(clearOption);

    definedTicketTypes.forEach((type) => {
        const option = document.createElement('option');
        option.value = JSON.stringify(type);
        option.textContent = type.ticketTypeName;
        if (type.color) {
            option.style.backgroundColor = type.color;
            const hex = type.color.replace('#', '');
            const r = parseInt(hex.substring(0, 2), 16);
            const g = parseInt(hex.substring(2, 4), 16);
            const b = parseInt(hex.substring(4, 6), 16);
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            option.style.color = brightness > 125 ? 'black' : 'white';
        }
        ticketTypeSelect.appendChild(option);
    });

    ticketTypeSelect.addEventListener('change', (event) => {
        if (event.target.value) {
            selectedTicketType = JSON.parse(event.target.value);
        } else {
            selectedTicketType = null;
        }
        console.log('Selected Ticket Type for Assignment:', selectedTicketType || 'Clear/None');
    });

    function updateSeatVisual(seatGroup, ticketType) {
        const seatElements = seatGroup.querySelectorAll('path, circle, rect');
        const fillColor = (ticketType && ticketType.color) ? ticketType.color : '#C4C4C4';
        seatElements.forEach(element => {
            element.style.fill = fillColor;
        });
    }

    seatConfiguration.forEach(configuredSeat => {
        const seatGroup = document.getElementById(configuredSeat.seatId);
        if (seatGroup) {
            const correspondingTicketType = definedTicketTypes.find(type => type.type_id === configuredSeat.type_id);
            updateSeatVisual(seatGroup, correspondingTicketType || (configuredSeat.status === 'unavailable' ? definedTicketTypes.find(t => t.isUnavailable) : null));
            
            if (['booked', 'issued', 'pending'].includes(configuredSeat.status)) {
                seatGroup.style.cursor = 'not-allowed';
                seatGroup.classList.add('seat-status-locked');
            } else {
                seatGroup.style.cursor = 'pointer';
                seatGroup.classList.add('clickable-seat');
            }
        }
    });

    // --- Mouse Event Handlers for Marquee Selection ---
    function handleSvgMouseDown(event) {
        // Only start drag if mousedown is on the SVG itself, not on a seat (unless specific condition)
        if (event.target !== svgSeatMapContainer && !event.target.closest('svg')) {
             // If the target is not the SVG background itself (e.g. it's a seat path),
             // let the seat's click handler manage it primarily for single clicks.
             // Drag will only start if mouse moves significantly.
        }

        event.preventDefault();
        wasDragOperation = false; // Reset flag
        isDragging = true;
        
        const svgRect = svgSeatMapContainer.getBoundingClientRect();
        // For marquee div, coordinates are relative to its offset parent.
        // We use clientX/Y and then adjust.
        dragStartX = event.clientX;
        dragStartY = event.clientY;

        const marqueeParent = marqueeRectDiv.offsetParent || document.body;
        const parentRect = marqueeParent.getBoundingClientRect();

        marqueeRectDiv.style.left = `${dragStartX - parentRect.left}px`;
        marqueeRectDiv.style.top = `${dragStartY - parentRect.top}px`;
        marqueeRectDiv.style.width = '0px';
        marqueeRectDiv.style.height = '0px';
        marqueeRectDiv.style.display = 'block';

        document.addEventListener('mousemove', handleDocumentMouseMove);
        document.addEventListener('mouseup', handleDocumentMouseUp);
    }

    function handleDocumentMouseMove(event) {
        if (!isDragging) return;
        event.preventDefault();
        wasDragOperation = true; // Mark that a drag occurred

        let currentX = event.clientX;
        let currentY = event.clientY;
        
        const marqueeParent = marqueeRectDiv.offsetParent || document.body;
        const parentRect = marqueeParent.getBoundingClientRect();

        let newLeft = Math.min(dragStartX, currentX) - parentRect.left;
        let newTop = Math.min(dragStartY, currentY) - parentRect.top;
        let newWidth = Math.abs(currentX - dragStartX);
        let newHeight = Math.abs(currentY - dragStartY);

        marqueeRectDiv.style.left = `${newLeft}px`;
        marqueeRectDiv.style.top = `${newTop}px`;
        marqueeRectDiv.style.width = `${newWidth}px`;
        marqueeRectDiv.style.height = `${newHeight}px`;
    }

    function handleDocumentMouseUp(event) {
        if (!isDragging) return;
        isDragging = false;
        marqueeRectDiv.style.display = 'none';
        document.removeEventListener('mousemove', handleDocumentMouseMove);
        document.removeEventListener('mouseup', handleDocumentMouseUp);

        // Only process as marquee selection if it was a true drag, not a click
        if (!wasDragOperation || (parseFloat(marqueeRectDiv.style.width) < 10 && parseFloat(marqueeRectDiv.style.height) < 10)) {
             // If it wasn't a significant drag, let the click handler for individual seats take over.
             // wasDragOperation will be false if mousemove didn't happen.
            return;
        }
        
        const marqueeVisualFinalRect = marqueeRectDiv.getBoundingClientRect(); // Page coordinates

        const newlySelectedByMarquee = new Set();
        allSeatGroupsOnPage.forEach(seatGroup => {
            // Check if the seat is within the currently active SVG map (important if multiple maps could exist in DOM hidden)
            if (!svgSeatMapContainer || !svgSeatMapContainer.contains(seatGroup)) {
                return;
            }

            const seatId = seatGroup.id;
            const seatRect = seatGroup.getBoundingClientRect(); // Page coordinates

            const intersects = !(
                seatRect.right < marqueeVisualFinalRect.left ||
                seatRect.left > marqueeVisualFinalRect.right ||
                seatRect.bottom < marqueeVisualFinalRect.top ||
                seatRect.top > marqueeVisualFinalRect.bottom
            );

            if (intersects) {
                const configuredSeat = seatConfiguration.find(s => s.seatId === seatId);
                const currentStatus = configuredSeat ? configuredSeat.status : 'available';
                if (!['booked', 'issued', 'pending'].includes(currentStatus)) {
                    newlySelectedByMarquee.add(seatId);
                }
            }
        });

        if (!event.shiftKey) { // If Shift is not held, marquee replaces current selection
            selectedSeatsGroup.forEach(seatId => {
                if (!newlySelectedByMarquee.has(seatId)) {
                    document.getElementById(seatId)?.classList.remove('seat-highlighted');
                }
            });
            selectedSeatsGroup.clear();
        }

        newlySelectedByMarquee.forEach(seatId => {
            selectedSeatsGroup.add(seatId); // Set handles duplicates
            document.getElementById(seatId)?.classList.add('seat-highlighted');
        });
        console.log('Selected seats (marquee):', Array.from(selectedSeatsGroup));
    }


    // Event listener for individual seat clicks (for selection toggle)
    allSeatGroupsOnPage.forEach((seatGroup) => {
        seatGroup.addEventListener('click', (event) => {
            if (wasDragOperation) { // If a drag just completed, don't process this as a click
                return;
            }
            // Ensure the clicked seat is part of the active SVG map
            if (svgSeatMapContainer && !svgSeatMapContainer.contains(seatGroup)) {
                return;
            }

            const seatId = seatGroup.id;
            const configuredSeat = seatConfiguration.find(s => s.seatId === seatId);
            const currentStatus = configuredSeat ? configuredSeat.status : null;

            if (['booked', 'issued', 'pending'].includes(currentStatus)) {
                alert(`This seat is already ${currentStatus} and cannot be modified.`);
                return;
            }

            if (!event.shiftKey && !selectedSeatsGroup.has(seatId) && selectedSeatsGroup.size > 0) {
                 // If not holding shift, and clicking a new seat, and there are existing selections,
                 // clear previous selection (standard behavior for non-additive selection)
                selectedSeatsGroup.forEach(id => document.getElementById(id)?.classList.remove('seat-highlighted'));
                selectedSeatsGroup.clear();
            }


            if (selectedSeatsGroup.has(seatId)) {
                selectedSeatsGroup.delete(seatId);
                seatGroup.classList.remove('seat-highlighted');
            } else {
                selectedSeatsGroup.add(seatId);
                seatGroup.classList.add('seat-highlighted');
            }
            console.log('Selected seats (click):', Array.from(selectedSeatsGroup));
        });
    });

    // Event listener for "Assign to Selected" button (largely unchanged)
    assignToSelectedBtn.addEventListener('click', () => {
        if (selectedSeatsGroup.size === 0) {
            alert('Please select one or more seats first.');
            return;
        }

        const isClearingAssignment = selectedTicketType === null && ticketTypeSelect.value === "";

        if (!isClearingAssignment && !selectedTicketType) {
            alert('Please select a valid ticket type from the dropdown to assign, or choose "Clear Assignment".');
            return;
        }

        selectedSeatsGroup.forEach(seatId => {
            const seatGroup = document.getElementById(seatId);
            if (!seatGroup) return;

            let existingSeatIndex = seatConfiguration.findIndex(s => s.seatId === seatId);
            
            if (existingSeatIndex > -1 && ['booked', 'issued', 'pending'].includes(seatConfiguration[existingSeatIndex].status)) {
                console.warn(`Seat ${seatId} is ${seatConfiguration[existingSeatIndex].status}, cannot change.`);
                // Optionally remove highlight even if not changed:
                // seatGroup.classList.remove('seat-highlighted');
                return; 
            }

            if (isClearingAssignment) {
                if (existingSeatIndex > -1) {
                    seatConfiguration.splice(existingSeatIndex, 1); 
                }
                updateSeatVisual(seatGroup, null);
            } else { // Assigning a specific ticket type
                const newSeatData = {
                    price: selectedTicketType.price,
                    seatId: seatId,
                    status: selectedTicketType.isUnavailable ? 'unavailable' : 'available',
                    type_id: selectedTicketType.type_id,
                    ticketTypeName: selectedTicketType.ticketTypeName,
                    color: selectedTicketType.color
                };
                if (existingSeatIndex > -1) {
                    seatConfiguration[existingSeatIndex] = { ...seatConfiguration[existingSeatIndex], ...newSeatData };
                } else {
                    seatConfiguration.push(newSeatData);
                }
                updateSeatVisual(seatGroup, selectedTicketType);
            }
            seatGroup.classList.remove('seat-highlighted'); // Remove highlight after processing
        });

        seatConfigurationInput.value = JSON.stringify(seatConfiguration, null, 2);
        console.log('Updated Seat Configuration:', seatConfiguration);
        selectedSeatsGroup.clear();
    });
    
    initializeMarqueeSelection(); // Call to set up marquee listeners and div

    const style = document.createElement('style');
    style.innerHTML = `
        .clickable-seat:not(.seat-status-locked):hover path,
        .clickable-seat:not(.seat-status-locked):hover circle,
        .clickable-seat:not(.seat-status-locked):hover rect {
            opacity: 0.7;
            transition: opacity 0.15s ease-in-out;
        }
        .seat-status-locked {
            cursor: not-allowed !important;
        }
        .seat-highlighted path, .seat-highlighted circle, .seat-highlighted rect {
            stroke: #005cbf; /* Darker Blue stroke for highlight */
            stroke-width: 2.5px; /* Made slightly thicker */
            stroke-linejoin: round; 
        }
        .marquee-selection-visual { /* Style for the marquee rectangle */
            position: absolute;
            border: 1px dashed #007bff;
            background-color: rgba(0, 123, 255, 0.15);
            pointer-events: none; /* Important: so it doesn't capture mouse events itself */
            z-index: 1000; /* Ensure it's on top */
        }
    `;
    document.head.appendChild(style);

    seatConfigurationInput.value = JSON.stringify(seatConfiguration, null, 2);
    console.log('Initial Seat Configuration:', seatConfiguration);
});
</script>