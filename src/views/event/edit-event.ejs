<%- include('../layouts/header.ejs') %>
<style>
svg{
width: 100%;
height: auto; 
}
</style>
<div class="content-page">
    <div class="content">

        <div class="container-fluid">

            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="header-title">Edit Event</h4>
                            <ul class="nav nav-pills navtab-bg">
                            <li class="nav-item">
                                <a href="#home1" data-bs-toggle="tab" aria-expanded="false" class="nav-link active">
                                   Basic Details
                                </a>
                            </li>
                            <li class="nav-item">
                                <a href="#profile1" data-bs-toggle="tab" aria-expanded="true" class="nav-link ">
                                   Seat Configuration
                                </a>
                            </li>
                            
                        </ul>

                        <div class="tab-content">
                            <div class="tab-pane show active" id="home1">
                                <form class="mt-4" method="POST" action="/event/edit/<%= enrichedEvent.id %>" enctype="multipart/form-data">
                                    <% if (success) { %>
                                        <div class="alert alert-success"><%= success %></div>
                                    <% } %>
                                    <% if (error) { %>
                                        <div class="alert alert-danger"><%= error %></div>
                                    <% } %>

                                    <div class="row">
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Name</label>
                                            <input type="text" class="form-control" name="name" value="<%= formData?.name || enrichedEvent.name || '' %>">
                                            <% if (validationErrors?.name) { %>
                                                <small class="text-danger"><%= validationErrors.name[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Start Date Time</label>
                                            <input type="text" name="start_date_time" class="form-control datetime-datepicker" placeholder="Start Date and Time" value="<%= formData?.start_date_time || new Date(enrichedEvent.start_date_time).toISOString().slice(0, 16).replace('T', ' ') || '' %>">
                                            <% if (validationErrors?.start_date_time) { %>
                                                <small class="text-danger"><%= validationErrors.start_date_time[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">End Date Time</label>
                                            <input type="text" name="end_date_time" class="form-control datetime-datepicker" placeholder="End Date and Time" value="<%= formData?.end_date_time || new Date(enrichedEvent.end_date_time).toISOString().slice(0, 16).replace('T', ' ') || '' %>">
                                            <% if (validationErrors?.end_date_time) { %>
                                                <small class="text-danger"><%= validationErrors.end_date_time[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Description</label>
                                            <textarea class="form-control" id="example-textarea" name="discription" rows="5"><%= formData?.discription || enrichedEvent.description || '' %></textarea>
                                            <% if (validationErrors?.discription) { %>
                                                <small class="text-danger"><%= validationErrors.discription[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Ticket Policy</label>
                                            <textarea class="form-control" id="example-textarea" name="policy" rows="5"><%= formData?.policy || enrichedEvent.policy || '' %></textarea>
                                            <% if (validationErrors?.policy) { %>
                                                <small class="text-danger"><%= validationErrors.policy[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Organized By</label>
                                            <input type="text" class="form-control" name="organized_by" value="<%= formData?.organized_by || enrichedEvent.organized_by || '' %>">
                                            <% if (validationErrors?.organized_by) { %>
                                                <small class="text-danger"><%= validationErrors.organized_by[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Location</label>
                                            <select class="form-control" data-toggle="select2" name="location" data-width="100%">
                                                <option value="BMICH" <%= (formData?.location || enrichedEvent.location) === 'BMICH' ? 'selected' : '' %>>BMICH</option>
                                                <option value="Nelum Pokuna" <%= (formData?.location || enrichedEvent.location) === 'Nelum Pokuna' ? 'selected' : '' %>>Nelum Pokuna</option>
                                                <option value="Musaeus College" <%= (formData?.location || enrichedEvent.location) === 'Musaeus College' ? 'selected' : '' %>>Musaeus College</option>
                                            </select>
                                            <% if (validationErrors?.location) { %>
                                                <small class="text-danger"><%= validationErrors.location[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Artists</label>
                                            <select class="form-control select2-multiple" name="artists[]" data-toggle="select2" data-width="100%" multiple="multiple" data-placeholder="Choose ...">
                                                <% allArtists.forEach(artist => { %>
                                                    <option value="<%= artist.id %>"
                                                        <%
                                                            // Check if the artist ID is in formData (after validation error)
                                                            const isSelectedInFormData = formData?.artists && Array.isArray(formData.artists) && formData.artists.includes(artist.id.toString());
                                                            // Check if the artist ID is in enrichedEvent.artist_details (from database)
                                                            const isSelectedInEvent = enrichedEvent.artist_details && Array.isArray(enrichedEvent.artist_details) && enrichedEvent.artist_details.includes(artist.id);
                                                            if (isSelectedInFormData || isSelectedInEvent) {
                                                                %> selected <%
                                                            }
                                                        %>
                                                    >
                                                        <%= artist.name %>
                                                    </option>
                                                <% }); %>
                                            </select>
                                            <% if (validationErrors?.artists) { %>
                                                <small class="text-danger"><%= validationErrors.artists[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Banner Image</label>
                                            <input type="file" class="form-control" name="banner_image" accept="image/*">
                                            <% if (enrichedEvent.banner_image) { %>
                                                <div class="mt-2">
                                                    <img src="<%= enrichedEvent.banner_image %>" alt="Banner Image" style="max-width: 150px; height: auto;">
                                                </div>
                                            <% } %>
                                            <% if (validationErrors?.banner_image) { %>
                                                <small class="text-danger"><%= validationErrors.banner_image[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label class="form-label">Featured Image</label>
                                            <input type="file" class="form-control" name="featured_image" accept="image/*">
                                            <% if (enrichedEvent.featured_image) { %>
                                                <div class="mt-2">
                                                    <img src="<%= enrichedEvent.featured_image %>" alt="Featured Image" style="max-width: 150px; height: auto;">
                                                </div>
                                            <% } %>
                                            <% if (validationErrors?.featured_image) { %>
                                                <small class="text-danger"><%= validationErrors.featured_image[0] %></small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-12 mb-3">
                                            <h4 class="header-title">Set Ticket Prices</h4>
                                            <div id="ticket-container">
                                                <%
                                                // Prioritize formData tickets if present (after validation error)
                                                const ticketsToRender = formData?.tickets?.length > 0 ? formData.tickets : enrichedEvent.ticket_details;
                                                %>

                                                <% if (ticketsToRender && ticketsToRender.length > 0) { %>
                                                    <% ticketsToRender.forEach((ticket, index) => { %>
                                                        <%
                                                            // Determine if 'ticket' has 'type_id' (from formData) or 'ticketTypeId' (from enrichedEvent)
                                                            const currentTicketTypeId = ticket.type_id || ticket.ticketTypeId;
                                                            const currentTicketPrice = ticket.price;
                                                            const currentTicketCount = ticket.count || ticket.ticketCount;
                                                            const currentTicketType = ticket_types.find(tt => tt.id === currentTicketTypeId);
                                                            const currentHasCount = currentTicketType?.has_ticket_count;
                                                        %>
                                                        <div class="row ticket-row align-items-end mb-2" data-index="<%= index %>">
                                                            <div class="col-md-4">
                                                                <label class="form-label">Ticket Type</label>
                                                                <select name="tickets[<%= index %>][type_id]" class="form-control ticket-type-select" required>
                                                                    <option value="">Select a type</option>
                                                                    <% ticket_types.forEach(tt => { %>
                                                                        <option value="<%= tt.id %>" data-has-count="<%= tt.has_ticket_count %>" <%= currentTicketTypeId == tt.id ? 'selected' : '' %>>
                                                                            <%= tt.name %>
                                                                        </option>
                                                                    <% }); %>
                                                                </select>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <label class="form-label">Price</label>
                                                                <input type="number" name="tickets[<%= index %>][price]" class="form-control" placeholder="Enter price" value="<%= currentTicketPrice %>" required>
                                                            </div>
                                                            <div class="col-md-3 ticket-count-wrapper" style="<%= currentHasCount ? 'display: block;' : 'display: none;' %>">
                                                                <label class="form-label">Ticket Count</label>
                                                                <input type="number" name="tickets[<%= index %>][count]" class="form-control" placeholder="Enter count" value="<%= currentTicketCount || '' %>" <%= currentHasCount ? 'required' : '' %>>
                                                            </div>
                                                            <div class="col-md-2">
                                                                <button type="button" class="btn btn-danger remove-ticket-btn">Remove</button>
                                                            </div>
                                                        </div>
                                                    <% }); %>
                                                <% } %>
                                            </div>
                                            <button type="button" class="btn btn-success" id="add-ticket-btn">+ Add</button>
                                        </div>
                                    </div>

                                    <button type="submit" class="btn btn-primary">Update</button>
                                </form>
                            </div>
                            <div class="tab-pane " id="profile1">
    <form class="mt-4" method="POST" action="/event/update-event-seats/<%= enrichedEvent.id %>">
        <div class="col-md-4 mb-3 mt-3">
            <label class="form-label">Assign Ticket Type</label>
            <select class="form-control" id="ticket-type-select" data-width="100%">
                <option value="">Select Ticket Type</option>
            </select>
        </div>

        <div class="seat-map-container" style="position: relative; overflow: hidden;">
            <% if (enrichedEvent.location == "BMICH") { %>
                <%- include('../seat-maps/bmich.ejs') %>
            <% } %>
            <% if (enrichedEvent.location == "Nelum Pokuna") { %>
                <%- include('../seat-maps/nelum.ejs') %>
            <% } %>
            <% if (enrichedEvent.location == "Musaeus College") { %>
                <%- include('../seat-maps/musaeus.ejs') %>
            <% } %>
        </div>

        <input type="hidden" name="seat_configuration" id="seat_configuration">
        <button type="submit" class="btn btn-primary mt-4">Save</button>
    </form>
</div>
                           
                        </div>

                            

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<%- include('../layouts/footer.ejs') %>

<script>
 
    const ticketTypes = <%- JSON.stringify(ticket_types) %>;
    let ticketIndex = 0; 

    const existingTicketRows = document.querySelectorAll('.ticket-row');
    if (existingTicketRows.length > 0) {
        ticketIndex = existingTicketRows.length;
    }

    function createTicketRow(index, ticketData = {}) {
        let options = '';
        ticketTypes.forEach(tt => {

            const isSelected = ticketData.type_id == tt.id || ticketData.ticketTypeId == tt.id;
            options += `<option value="${tt.id}" data-has-count="${tt.has_ticket_count}" ${isSelected ? 'selected' : ''}>${tt.name}</option>`;
        });

        const initialHasCount = ticketTypes.find(tt => tt.id == (ticketData.type_id || ticketData.ticketTypeId))?.has_ticket_count || false;

        return `
            <div class="row ticket-row align-items-end mb-2" data-index="${index}">
                <div class="col-md-4">
                    <label class="form-label">Ticket Type</label>
                    <select name="tickets[${index}][type_id]" class="form-control ticket-type-select" required>
                        <option value="">Select a type</option>
                        ${options}
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Price</label>
                    <input type="number" name="tickets[${index}][price]" class="form-control" placeholder="Enter price" value="${ticketData.price || ''}" required>
                </div>
                <div class="col-md-3 ticket-count-wrapper" style="${initialHasCount ? 'display: block;' : 'display: none;'}">
                    <label class="form-label">Ticket Count</label>
                    <input type="number" name="tickets[${index}][count]" class="form-control" placeholder="Enter count" value="${ticketData.count || ticketData.ticketCount || ''}" ${initialHasCount ? 'required' : ''}>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger remove-ticket-btn">Remove</button>
                </div>
            </div>
        `;
    }

    document.getElementById('add-ticket-btn').addEventListener('click', () => {
        const rowHtml = createTicketRow(ticketIndex++);
        document.getElementById('ticket-container').insertAdjacentHTML('beforeend', rowHtml);
    });

    document.getElementById('ticket-container').addEventListener('change', function(e) {
        if (e.target.classList.contains('ticket-type-select')) {
            const row = e.target.closest('.ticket-row');
            const selectedOption = e.target.selectedOptions[0];

            const hasCount = selectedOption.dataset.hasCount === '1';
            const countWrapper = row.querySelector('.ticket-count-wrapper');
            const countInput = countWrapper.querySelector('input');

            if (hasCount) {
                countWrapper.style.display = 'block';
                countInput.required = true;
            } else {
                countWrapper.style.display = 'none';
                countInput.required = false;
                countInput.value = ''; 
            }
        }
    });

    document.getElementById('ticket-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-ticket-btn')) {
            e.target.closest('.ticket-row').remove();

        }
    });



</script>
<script>
const mapedSeats = JSON.parse(<%- JSON.stringify(enrichedEvent.seats || "[]") %>);
const seatTicketTypes = <%- JSON.stringify(enrichedEvent.ticket_details || []) %>;

document.addEventListener('DOMContentLoaded', () => {
    const ticketTypes = [
        { price: 0, type_id: 0, count: null, has_ticket_count: false, isUnavailable: true, ticketTypeName: 'Unavailable', color: '#000000' }, // Black color for unavailable
        ...seatTicketTypes
    ];

    const seatConfiguration = mapedSeats.map(seat => {
        const ticketType = ticketTypes.find(type => type.type_id === seat.type_id);
        const color = ticketType ? ticketType.color : '#C4C4C4';
        const status = seat.status || (ticketType && ticketType.isUnavailable ? 'unavailable' : 'available');
        return {
            ...seat,
            color: color,
            status: status
        };
    });

    let selectedTicketType = null;

    const ticketTypeSelect = document.getElementById('ticket-type-select');
    const seatConfigurationInput = document.getElementById('seat_configuration');
    const seats = document.querySelectorAll('.seat-group'); // All seat SVG groups

    // Get the container for the seat map (assuming it's a div wrapping the SVG)
    // You'll need to make sure your seat map SVG is inside a div with an ID
    const seatMapContainer = document.querySelector('.seat-map-container'); // You need to add this class/id to your SVG parent div

    // Create the selection rectangle element
    const selectionRect = document.createElement('div');
    selectionRect.style.position = 'absolute';
    selectionRect.style.border = '1px dashed #007bff';
    selectionRect.style.backgroundColor = 'rgba(0, 123, 255, 0.2)';
    selectionRect.style.display = 'none'; // Hidden initially
    selectionRect.style.pointerEvents = 'none'; // Allows clicks to pass through to elements below
    document.body.appendChild(selectionRect);

    let isSelecting = false;
    let startX, startY;
    let currentSelectedSeats = new Set(); // To store IDs of seats currently highlighted by the selection rectangle

    // Populate the ticket type dropdown
    ticketTypes.forEach((type) => {
        const option = document.createElement('option');
        option.value = JSON.stringify(type);
        option.textContent = type.ticketTypeName;
        ticketTypeSelect.appendChild(option);
    });

    // Event listener for ticket type selection
    ticketTypeSelect.addEventListener('change', (event) => {
        if (event.target.value) {
            selectedTicketType = JSON.parse(event.target.value);
            console.log('Selected Ticket Type:', selectedTicketType);
        } else {
            selectedTicketType = null;
            console.log('No ticket type selected. Please select a ticket type.');
        }
    });

    // Function to update the visual state of a seat
    function updateSeatVisual(seatGroup, ticketType) {
        const seatPaths = seatGroup.querySelectorAll('path');
        if (ticketType && ticketType.color) {
            seatPaths.forEach(path => {
                path.style.fill = ticketType.color;
            });
        } else {
            seatPaths.forEach(path => {
                path.style.fill = '#C4C4C4'; // Original gray
            });
        }
    }

    // Function to apply the selected ticket type to a single seat
    function applyTicketTypeToSeat(seatId) {
        const seatGroup = document.getElementById(seatId);
        if (!seatGroup) return;

        if (!selectedTicketType) {
            alert('Please select a ticket type first from the dropdown!');
            return;
        }

        const existingSeatIndex = seatConfiguration.findIndex((seat) => seat.seatId === seatId);
        const currentSeatStatus = existingSeatIndex > -1 ? seatConfiguration[existingSeatIndex].status : null;

        if (currentSeatStatus === 'booked' || currentSeatStatus === 'issued' || currentSeatStatus === 'pending') {
            // alert(`Seat ${seatId} is already ${currentSeatStatus} and cannot be changed.`); // Maybe too many alerts for multi-selection
            return; // Skip locked seats
        }

        if (existingSeatIndex > -1) {
            if (selectedTicketType.isUnavailable && seatConfiguration[existingSeatIndex].status === 'unavailable' ||
                (!selectedTicketType.isUnavailable && seatConfiguration[existingSeatIndex].type_id === selectedTicketType.type_id)
            ) {
                seatConfiguration.splice(existingSeatIndex, 1);
                updateSeatVisual(seatGroup, null); // Revert to default color
            } else {
                seatConfiguration[existingSeatIndex].price = selectedTicketType.price;
                seatConfiguration[existingSeatIndex].type_id = selectedTicketType.type_id;
                seatConfiguration[existingSeatIndex].ticketTypeName = selectedTicketType.ticketTypeName;
                seatConfiguration[existingSeatIndex].status = selectedTicketType.isUnavailable ? 'unavailable' : 'available';
                updateSeatVisual(seatGroup, selectedTicketType);
            }
        } else {
            const newSeat = {
                price: selectedTicketType.price,
                seatId: seatId,
                status: selectedTicketType.isUnavailable ? 'unavailable' : 'available',
                type_id: selectedTicketType.type_id,
                ticketTypeName: selectedTicketType.ticketTypeName,
            };
            seatConfiguration.push(newSeat);
            updateSeatVisual(seatGroup, selectedTicketType);
        }
    }


    // --- Initial Rendering of Mapped Seats ---
    seatConfiguration.forEach(configuredSeat => {
        const seatGroup = document.getElementById(configuredSeat.seatId);
        if (seatGroup) {
            const correspondingTicketType = ticketTypes.find(
                type => type.type_id === configuredSeat.type_id
            );
            if (correspondingTicketType) {
                updateSeatVisual(seatGroup, correspondingTicketType);
            } else if (configuredSeat.status === 'unavailable') {
                const unavailableType = ticketTypes.find(type => type.isUnavailable);
                updateSeatVisual(seatGroup, unavailableType);
            }
            seatGroup.style.cursor = 'pointer';

            if (configuredSeat.status === 'booked' || configuredSeat.status === 'issued' || configuredSeat.status === 'pending') {
                seatGroup.style.cursor = 'not-allowed';
                seatGroup.classList.add('seat-status-locked'); // Add class for styling locked seats
            }
        }
    });


    // Event listener for single seat clicks (still useful for individual changes)
    seats.forEach((seatGroup) => {
        // Only add click listener if not a locked seat
        if (!seatGroup.classList.contains('seat-status-locked')) {
            seatGroup.classList.add('clickable-seat');
            seatGroup.addEventListener('click', () => {
                const seatId = seatGroup.id;
                applyTicketTypeToSeat(seatId);
                seatConfigurationInput.value = JSON.stringify(seatConfiguration, null, 2);
                console.log('Current Seat Configuration (single click):', seatConfiguration);
            });
        }
    });

    // --- Marquee Selection Logic ---

    // Get the bounding box of the seat map container to calculate relative positions
    let containerRect;
    if (seatMapContainer) {
        containerRect = seatMapContainer.getBoundingClientRect();
    } else {
        console.warn("Seat map container with class 'seat-map-container' not found. Marquee selection might not work as expected.");
    }

    document.addEventListener('mousedown', (e) => {
        // Check if the click is within the seat map container and not on a dropdown or button
        if (seatMapContainer && seatMapContainer.contains(e.target) && e.button === 0) { // Left mouse button
            isSelecting = true;
            startX = e.clientX;
            startY = e.clientY;

            selectionRect.style.left = startX + 'px';
            selectionRect.style.top = startY + 'px';
            selectionRect.style.width = '0';
            selectionRect.style.height = '0';
            selectionRect.style.display = 'block';

            currentSelectedSeats.clear();
            // Remove highlight from any previously highlighted seats
            document.querySelectorAll('.seat-highlight').forEach(seat => {
                seat.classList.remove('seat-highlight');
            });
        }
    });

    document.addEventListener('mousemove', (e) => {
        if (!isSelecting) return;

        const currentX = e.clientX;
        const currentY = e.clientY;

        const width = currentX - startX;
        const height = currentY - startY;

        selectionRect.style.left = (Math.min(startX, currentX)) + 'px';
        selectionRect.style.top = (Math.min(startY, currentY)) + 'px';
        selectionRect.style.width = (Math.abs(width)) + 'px';
        selectionRect.style.height = (Math.abs(height)) + 'px';

        const rectBounds = selectionRect.getBoundingClientRect();

        // Iterate over all seats and check for intersection
        seats.forEach(seatGroup => {
            // Skip locked seats from being highlighted
            if (seatGroup.classList.contains('seat-status-locked')) {
                return;
            }

            const seatBounds = seatGroup.getBoundingClientRect();

            // Check for intersection
            if (
                rectBounds.left < seatBounds.right &&
                rectBounds.right > seatBounds.left &&
                rectBounds.top < seatBounds.bottom &&
                rectBounds.bottom > seatBounds.top
            ) {
                if (!currentSelectedSeats.has(seatGroup.id)) {
                    currentSelectedSeats.add(seatGroup.id);
                    seatGroup.classList.add('seat-highlight'); // Add a highlight class
                }
            } else {
                if (currentSelectedSeats.has(seatGroup.id)) {
                    currentSelectedSeats.delete(seatGroup.id);
                    seatGroup.classList.remove('seat-highlight'); // Remove highlight
                }
            }
        });
    });

    document.addEventListener('mouseup', () => {
        if (!isSelecting) return;
        isSelecting = false;
        selectionRect.style.display = 'none'; // Hide the selection rectangle

        if (!selectedTicketType) {
            alert('Please select a ticket type first from the dropdown to apply changes.');
            // Clear highlights if no ticket type was selected
            document.querySelectorAll('.seat-highlight').forEach(seat => {
                seat.classList.remove('seat-highlight');
            });
            currentSelectedSeats.clear();
            return;
        }

        // Apply the selected ticket type to all seats that were in the selection area
        currentSelectedSeats.forEach(seatId => {
            applyTicketTypeToSeat(seatId);
        });

        // Clear highlight from all seats after selection is applied
        document.querySelectorAll('.seat-highlight').forEach(seat => {
            seat.classList.remove('seat-highlight');
        });
        currentSelectedSeats.clear();

        // Update the hidden input field after batch processing
        seatConfigurationInput.value = JSON.stringify(seatConfiguration, null, 2);
        console.log('Current Seat Configuration (marquee selection):', seatConfiguration);
    });


    // Optional: Add some basic CSS for hover effect on seats and selection highlight
    const style = document.createElement('style');
    style.innerHTML = `
        .clickable-seat {
            cursor: pointer;
        }
        .clickable-seat:hover {
            opacity: 0.8; /* Dim on hover */
            transition: opacity 0.2s ease-in-out;
        }
        .seat-status-locked {
            cursor: not-allowed !important;
            filter: grayscale(50%); /* Example: make them a bit desaturated */
        }
        .seat-highlight path {
            stroke: #007bff; /* Highlight border */
            stroke-width: 2px;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Optional subtle glow */
        }
    `;
    document.head.appendChild(style);

    // Initial population of the hidden input field
    seatConfigurationInput.value = JSON.stringify(seatConfiguration, null, 2);
    console.log('Initial Seat Configuration:', seatConfiguration);
});
</script>